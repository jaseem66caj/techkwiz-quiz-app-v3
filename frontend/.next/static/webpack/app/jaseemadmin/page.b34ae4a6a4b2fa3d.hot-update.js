"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/jaseemadmin/page",{

/***/ "(app-pages-browser)/./src/utils/realTimeSync.ts":
/*!***********************************!*\
  !*** ./src/utils/realTimeSync.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   realTimeSyncService: () => (/* binding */ realTimeSyncService)\n/* harmony export */ });\n/* harmony import */ var _quizDataManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quizDataManager */ \"(app-pages-browser)/./src/utils/quizDataManager.ts\");\n/* harmony import */ var _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rewardDataManager */ \"(app-pages-browser)/./src/utils/rewardDataManager.ts\");\n/* harmony import */ var _analyticsDataManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./analyticsDataManager */ \"(app-pages-browser)/./src/utils/analyticsDataManager.ts\");\n// Real-time data synchronization between admin dashboard and quiz game\n\n\n\nclass RealTimeSyncService {\n    static getInstance() {\n        if (!RealTimeSyncService.instance) {\n            RealTimeSyncService.instance = new RealTimeSyncService();\n        }\n        return RealTimeSyncService.instance;\n    }\n    // Start the sync loop\n    startSyncLoop() {\n        if (false) {}\n        this.syncInterval = setInterval(()=>{\n            this.processSyncQueue();\n        }, 1000); // Process every second\n    }\n    // Setup localStorage change listener for cross-tab sync\n    setupStorageListener() {\n        if (false) {}\n        window.addEventListener('storage', (e)=>{\n            var _e_key;\n            if (((_e_key = e.key) === null || _e_key === void 0 ? void 0 : _e_key.startsWith('admin_')) && e.newValue !== e.oldValue) {\n                this.handleStorageChange(e.key, e.newValue);\n            }\n        });\n    }\n    // Handle localStorage changes from other tabs\n    handleStorageChange(key, newValue) {\n        if (!newValue) return;\n        try {\n            const data = JSON.parse(newValue);\n            let eventType;\n            if (key.includes('quiz')) {\n                eventType = 'quiz_updated';\n            } else if (key.includes('reward')) {\n                eventType = 'reward_updated';\n            } else if (key.includes('analytics')) {\n                eventType = 'analytics_updated';\n            } else if (key.includes('settings')) {\n                eventType = 'settings_updated';\n            } else {\n                return;\n            }\n            const syncEvent = {\n                type: eventType,\n                data,\n                timestamp: Date.now(),\n                source: 'admin'\n            };\n            this.notifyListeners(eventType, syncEvent);\n        } catch (error) {\n            console.error('Failed to parse storage change:', error);\n        }\n    }\n    // Add event listener\n    addEventListener(eventType, callback) {\n        if (!this.eventListeners.has(eventType)) {\n            this.eventListeners.set(eventType, []);\n        }\n        this.eventListeners.get(eventType).push(callback);\n    }\n    // Remove event listener\n    removeEventListener(eventType, callback) {\n        const listeners = this.eventListeners.get(eventType);\n        if (listeners) {\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    // Notify listeners of events\n    notifyListeners(eventType, event) {\n        const listeners = this.eventListeners.get(eventType) || [];\n        listeners.forEach((callback)=>{\n            try {\n                callback(event);\n            } catch (error) {\n                console.error('Error in sync event listener:', error);\n            }\n        });\n    }\n    // Queue sync event\n    queueSync(event) {\n        const syncEvent = {\n            ...event,\n            timestamp: Date.now()\n        };\n        this.syncQueue.push(syncEvent);\n    }\n    // Process sync queue\n    async processSyncQueue() {\n        if (this.isProcessing || this.syncQueue.length === 0) {\n            return;\n        }\n        this.isProcessing = true;\n        try {\n            const events = [\n                ...this.syncQueue\n            ];\n            this.syncQueue = [];\n            for (const event of events){\n                await this.processEvent(event);\n            }\n            this.lastSyncTime = Date.now();\n        } catch (error) {\n            console.error('Error processing sync queue:', error);\n        } finally{\n            this.isProcessing = false;\n        }\n    }\n    // Process individual sync event\n    async processEvent(event) {\n        try {\n            switch(event.type){\n                case 'quiz_updated':\n                    await this.syncQuizData(event);\n                    break;\n                case 'reward_updated':\n                    await this.syncRewardData(event);\n                    break;\n                case 'analytics_updated':\n                    await this.syncAnalyticsData(event);\n                    break;\n                case 'settings_updated':\n                    await this.syncSettingsData(event);\n                    break;\n            }\n            this.notifyListeners(event.type, event);\n        } catch (error) {\n            console.error(\"Error processing \".concat(event.type, \" event:\"), error);\n        }\n    }\n    // Sync quiz data\n    async syncQuizData(event) {\n        if (event.source === 'admin') {\n            // Admin updated quiz data, sync to game\n            const gameQuizData = localStorage.getItem('game_quiz_data');\n            const adminQuizData = JSON.stringify(event.data);\n            if (gameQuizData !== adminQuizData) {\n                localStorage.setItem('game_quiz_data', adminQuizData);\n                localStorage.setItem('game_last_sync', Date.now().toString());\n            }\n        }\n    }\n    // Sync reward data\n    async syncRewardData(event) {\n        if (event.source === 'admin') {\n            // Admin updated reward data, sync to game\n            const gameRewardData = localStorage.getItem('game_reward_data');\n            const adminRewardData = JSON.stringify(event.data);\n            if (gameRewardData !== adminRewardData) {\n                localStorage.setItem('game_reward_data', adminRewardData);\n                localStorage.setItem('game_last_sync', Date.now().toString());\n            }\n        }\n    }\n    // Sync analytics data\n    async syncAnalyticsData(event) {\n        // Analytics data flows from game to admin\n        if (event.source === 'game') {\n            _analyticsDataManager__WEBPACK_IMPORTED_MODULE_2__.analyticsDataManager.importGameData(event.data);\n        }\n    }\n    // Sync settings data\n    async syncSettingsData(event) {\n        if (event.source === 'admin') {\n            // Admin updated settings, sync to game\n            const gameSettingsData = localStorage.getItem('game_settings_data');\n            const adminSettingsData = JSON.stringify(event.data);\n            if (gameSettingsData !== adminSettingsData) {\n                localStorage.setItem('game_settings_data', adminSettingsData);\n                localStorage.setItem('game_last_sync', Date.now().toString());\n            }\n        }\n    }\n    // Manual sync trigger\n    async triggerSync() {\n        try {\n            // Sync all data from admin to game\n            const quizData = _quizDataManager__WEBPACK_IMPORTED_MODULE_0__.quizDataManager.getQuestions();\n            const rewardData = _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__.rewardDataManager.getAllAchievements();\n            this.queueSync({\n                type: 'quiz_updated',\n                data: quizData,\n                source: 'admin'\n            });\n            this.queueSync({\n                type: 'reward_updated',\n                data: rewardData,\n                source: 'admin'\n            });\n            await this.processSyncQueue();\n            return {\n                success: true,\n                message: 'Data synchronized successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Sync failed'\n            };\n        }\n    }\n    // Get sync status\n    getSyncStatus() {\n        const gameLastSync = parseInt(localStorage.getItem('game_last_sync') || '0');\n        return {\n            lastSyncTime: this.lastSyncTime,\n            queueLength: this.syncQueue.length,\n            isProcessing: this.isProcessing,\n            gameLastSync\n        };\n    }\n    // Check if game data is in sync\n    isGameInSync() {\n        const gameLastSync = parseInt(localStorage.getItem('game_last_sync') || '0');\n        const adminLastUpdate = Math.max(parseInt(localStorage.getItem('admin_quiz_questions_updated') || '0'), parseInt(localStorage.getItem('admin_reward_config_updated') || '0'));\n        return gameLastSync >= adminLastUpdate;\n    }\n    // Force sync all data\n    async forceSyncAll() {\n        const quizData = _quizDataManager__WEBPACK_IMPORTED_MODULE_0__.quizDataManager.getQuestions();\n        const rewardData = _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__.rewardDataManager.getAllAchievements();\n        // Update game data directly\n        localStorage.setItem('game_quiz_data', JSON.stringify(quizData));\n        localStorage.setItem('game_reward_data', JSON.stringify(rewardData));\n        localStorage.setItem('game_last_sync', Date.now().toString());\n        // Notify listeners\n        this.notifyListeners('quiz_updated', {\n            type: 'quiz_updated',\n            data: quizData,\n            timestamp: Date.now(),\n            source: 'admin'\n        });\n        this.notifyListeners('reward_updated', {\n            type: 'reward_updated',\n            data: rewardData,\n            timestamp: Date.now(),\n            source: 'admin'\n        });\n    }\n    // Cleanup\n    destroy() {\n        if (this.syncInterval) {\n            clearInterval(this.syncInterval);\n            this.syncInterval = null;\n        }\n        this.eventListeners.clear();\n        this.syncQueue = [];\n    }\n    constructor(){\n        this.eventListeners = new Map();\n        this.syncQueue = [];\n        this.isProcessing = false;\n        this.lastSyncTime = 0;\n        this.syncInterval = null;\n        // Only initialize on client side\n        if (true) {\n            this.startSyncLoop();\n            this.setupStorageListener();\n        }\n    }\n}\nconst realTimeSyncService = RealTimeSyncService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/realTimeSync.ts\n"));

/***/ })

});