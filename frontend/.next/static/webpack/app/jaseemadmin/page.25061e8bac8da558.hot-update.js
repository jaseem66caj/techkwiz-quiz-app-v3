"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/jaseemadmin/page",{

/***/ "(app-pages-browser)/./src/utils/adminAuth.ts":
/*!********************************!*\
  !*** ./src/utils/adminAuth.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminAuth: () => (/* binding */ AdminAuth)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Simple hash function for password verification\nfunction simpleHash(str) {\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(16);\n}\n// Default development password\nconst DEFAULT_PASSWORD = 'TechKwiz2024!Admin';\nconst DEFAULT_PASSWORD_HASH = simpleHash(DEFAULT_PASSWORD);\nclass AdminAuth {\n    static getPasswordHash() {\n        // In production, this should come from environment variables\n        return process.env.NEXT_PUBLIC_ADMIN_PASSWORD_HASH || DEFAULT_PASSWORD_HASH;\n    }\n    static verifyPassword(password) {\n        const inputHash = simpleHash(password);\n        const expectedHash = this.getPasswordHash();\n        return inputHash === expectedHash;\n    }\n    static getSession() {\n        if (false) {}\n        try {\n            const sessionData = localStorage.getItem(this.SESSION_KEY);\n            if (!sessionData) return null;\n            const session = JSON.parse(sessionData);\n            // Check if session is expired\n            const now = Date.now();\n            if (now - session.lastActivity > this.SESSION_TIMEOUT) {\n                this.clearSession();\n                return null;\n            }\n            // Check if account is locked out\n            if (session.lockoutUntil && now < session.lockoutUntil) {\n                return session;\n            }\n            // Update last activity\n            session.lastActivity = now;\n            localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n            return session;\n        } catch (error) {\n            console.error('Error reading admin session:', error);\n            this.clearSession();\n            return null;\n        }\n    }\n    static login(password) {\n        const startTime = performance.now();\n        const session = this.getSession() || {\n            isAuthenticated: false,\n            loginTime: 0,\n            lastActivity: 0,\n            sessionId: '',\n            failedAttempts: 0\n        };\n        const now = Date.now();\n        // Check if account is locked out\n        if (session.lockoutUntil && now < session.lockoutUntil) {\n            const remainingTime = Math.ceil((session.lockoutUntil - now) / 60000);\n            return {\n                success: false,\n                message: \"Account locked. Try again in \".concat(remainingTime, \" minutes.\"),\n                lockoutUntil: session.lockoutUntil\n            };\n        }\n        // Verify password (optimized)\n        const passwordVerifyStart = performance.now();\n        const isValidPassword = this.verifyPassword(password);\n        const passwordVerifyEnd = performance.now();\n        console.log(\"\\uD83D\\uDD10 Password verification took: \".concat(passwordVerifyEnd - passwordVerifyStart, \"ms\"));\n        if (isValidPassword) {\n            const sessionCreateStart = performance.now();\n            const newSession = {\n                isAuthenticated: true,\n                loginTime: now,\n                lastActivity: now,\n                sessionId: Math.random().toString(36).substring(2, 15),\n                failedAttempts: 0\n            };\n            // Optimized: Use a single localStorage operation\n            const sessionData = JSON.stringify(newSession);\n            localStorage.setItem(this.SESSION_KEY, sessionData);\n            const sessionCreateEnd = performance.now();\n            console.log(\"\\uD83D\\uDD10 Session creation took: \".concat(sessionCreateEnd - sessionCreateStart, \"ms\"));\n            // Log activity asynchronously to avoid blocking\n            setTimeout(()=>{\n                this.logActivity('login_success', 'User logged in successfully');\n            }, 0);\n            const totalTime = performance.now() - startTime;\n            console.log(\"\\uD83D\\uDD10 AdminAuth.login took: \".concat(totalTime, \"ms\"));\n            return {\n                success: true,\n                message: 'Login successful'\n            };\n        } else {\n            // Increment failed attempts\n            session.failedAttempts = (session.failedAttempts || 0) + 1;\n            if (session.failedAttempts >= this.MAX_FAILED_ATTEMPTS) {\n                session.lockoutUntil = now + this.LOCKOUT_DURATION;\n                localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n                this.logActivity('account_locked', \"Account locked after \".concat(this.MAX_FAILED_ATTEMPTS, \" failed attempts\"));\n                return {\n                    success: false,\n                    message: \"Too many failed attempts. Account locked for 15 minutes.\",\n                    lockoutUntil: session.lockoutUntil\n                };\n            } else {\n                localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n                const remainingAttempts = this.MAX_FAILED_ATTEMPTS - session.failedAttempts;\n                this.logActivity('login_failed', \"Failed login attempt. \".concat(remainingAttempts, \" attempts remaining\"));\n                return {\n                    success: false,\n                    message: \"Invalid password. \".concat(remainingAttempts, \" attempts remaining.\")\n                };\n            }\n        }\n    }\n    static logout() {\n        this.logActivity('logout', 'User logged out');\n        this.clearSession();\n    }\n    static clearSession() {\n        if (true) {\n            localStorage.removeItem(this.SESSION_KEY);\n        }\n    }\n    static isAuthenticated() {\n        const session = this.getSession();\n        return (session === null || session === void 0 ? void 0 : session.isAuthenticated) === true;\n    }\n    static updateActivity() {\n        const session = this.getSession();\n        if (session && session.isAuthenticated) {\n            session.lastActivity = Date.now();\n            localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n        }\n    }\n    static logActivity(action, details) {\n        if (false) {}\n        try {\n            var _this_getSession;\n            const logs = JSON.parse(localStorage.getItem('admin_activity_logs') || '[]');\n            const logEntry = {\n                timestamp: Date.now(),\n                action,\n                details,\n                sessionId: ((_this_getSession = this.getSession()) === null || _this_getSession === void 0 ? void 0 : _this_getSession.sessionId) || 'unknown'\n            };\n            logs.push(logEntry);\n            // Keep only last 1000 entries\n            if (logs.length > 1000) {\n                logs.splice(0, logs.length - 1000);\n            }\n            localStorage.setItem('admin_activity_logs', JSON.stringify(logs));\n        } catch (error) {\n            console.error('Error logging admin activity:', error);\n        }\n    }\n    static getActivityLogs() {\n        if (false) {}\n        try {\n            return JSON.parse(localStorage.getItem('admin_activity_logs') || '[]');\n        } catch (error) {\n            console.error('Error reading activity logs:', error);\n            return [];\n        }\n    }\n}\nAdminAuth.SESSION_KEY = 'admin_session';\nAdminAuth.SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\nAdminAuth.MAX_FAILED_ATTEMPTS = 5;\nAdminAuth.LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/adminAuth.ts\n"));

/***/ })

});