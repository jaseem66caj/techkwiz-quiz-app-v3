"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/jaseemadmin/page",{

/***/ "(app-pages-browser)/./src/utils/bidirectionalSync.ts":
/*!****************************************!*\
  !*** ./src/utils/bidirectionalSync.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bidirectionalSync: () => (/* binding */ bidirectionalSync)\n/* harmony export */ });\n/* harmony import */ var _quizDataManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quizDataManager */ \"(app-pages-browser)/./src/utils/quizDataManager.ts\");\n/* harmony import */ var _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rewardDataManager */ \"(app-pages-browser)/./src/utils/rewardDataManager.ts\");\n/* harmony import */ var _settingsDataManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settingsDataManager */ \"(app-pages-browser)/./src/utils/settingsDataManager.ts\");\n// Bidirectional Data Synchronization System for TechKwiz Admin Dashboard\n\n\n\nclass BidirectionalSyncService {\n    static getInstance() {\n        if (!BidirectionalSyncService.instance) {\n            BidirectionalSyncService.instance = new BidirectionalSyncService();\n        }\n        return BidirectionalSyncService.instance;\n    }\n    // Get current admin configuration data\n    getAdminConfigData() {\n        const now = Date.now();\n        return {\n            quiz: {\n                questions: _quizDataManager__WEBPACK_IMPORTED_MODULE_0__.quizDataManager.getQuestions() || [],\n                categories: _quizDataManager__WEBPACK_IMPORTED_MODULE_0__.quizDataManager.getCategories() || [],\n                settings: _quizDataManager__WEBPACK_IMPORTED_MODULE_0__.quizDataManager.getSettings() || {},\n                lastModified: parseInt(localStorage.getItem('admin_quiz_questions_updated') || now.toString()),\n                version: this.generateVersion('quiz')\n            },\n            rewards: {\n                achievements: _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__.rewardDataManager.getAchievements() || [],\n                popupSettings: _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__.rewardDataManager.getRewardConfig().popupSettings || {},\n                coinMultipliers: _rewardDataManager__WEBPACK_IMPORTED_MODULE_1__.rewardDataManager.getRewardConfig().coinValues || {},\n                lastModified: parseInt(localStorage.getItem('admin_reward_config_updated') || now.toString()),\n                version: this.generateVersion('rewards')\n            },\n            systemSettings: {\n                featureFlags: _settingsDataManager__WEBPACK_IMPORTED_MODULE_2__.settingsDataManager.getSystemSettings().featureFlags || {},\n                configValues: _settingsDataManager__WEBPACK_IMPORTED_MODULE_2__.settingsDataManager.getSystemSettings() || {},\n                adsConfig: _settingsDataManager__WEBPACK_IMPORTED_MODULE_2__.settingsDataManager.getIntegrationSettings().adsense || {},\n                lastModified: parseInt(localStorage.getItem('admin_settings_updated') || now.toString()),\n                version: this.generateVersion('systemSettings')\n            }\n        };\n    }\n    // Get current frontend configuration data\n    getFrontendConfigData() {\n        const now = Date.now();\n        try {\n            return {\n                quiz: {\n                    questions: JSON.parse(localStorage.getItem('game_quiz_data') || '[]'),\n                    categories: JSON.parse(localStorage.getItem('game_categories') || '[]'),\n                    settings: JSON.parse(localStorage.getItem('game_quiz_settings') || '{}'),\n                    lastModified: parseInt(localStorage.getItem('game_last_sync') || now.toString()),\n                    version: localStorage.getItem('game_quiz_version') || '1.0.0'\n                },\n                rewards: {\n                    achievements: JSON.parse(localStorage.getItem('game_reward_data') || '[]'),\n                    popupSettings: JSON.parse(localStorage.getItem('game_popup_settings') || '{}'),\n                    coinMultipliers: JSON.parse(localStorage.getItem('game_coin_multipliers') || '{}'),\n                    lastModified: parseInt(localStorage.getItem('game_rewards_sync') || now.toString()),\n                    version: localStorage.getItem('game_rewards_version') || '1.0.0'\n                },\n                systemSettings: {\n                    featureFlags: JSON.parse(localStorage.getItem('game_feature_flags') || '{}'),\n                    configValues: JSON.parse(localStorage.getItem('game_settings_data') || '{}'),\n                    adsConfig: JSON.parse(localStorage.getItem('game_ads_config') || '{}'),\n                    lastModified: parseInt(localStorage.getItem('game_settings_sync') || now.toString()),\n                    version: localStorage.getItem('game_settings_version') || '1.0.0'\n                }\n            };\n        } catch (error) {\n            console.error('Error reading frontend config data:', error);\n            return this.getDefaultConfigData();\n        }\n    }\n    // Generate version string based on data hash\n    generateVersion(category) {\n        const timestamp = Date.now();\n        const hash = Math.random().toString(36).substring(2, 8);\n        return \"\".concat(category, \"-\").concat(timestamp, \"-\").concat(hash);\n    }\n    // Get default configuration data\n    getDefaultConfigData() {\n        const now = Date.now();\n        return {\n            quiz: {\n                questions: [],\n                categories: [],\n                settings: {},\n                lastModified: now,\n                version: '1.0.0'\n            },\n            rewards: {\n                achievements: [],\n                popupSettings: {},\n                coinMultipliers: {},\n                lastModified: now,\n                version: '1.0.0'\n            },\n            systemSettings: {\n                featureFlags: {},\n                configValues: {},\n                adsConfig: {},\n                lastModified: now,\n                version: '1.0.0'\n            }\n        };\n    }\n    // Detect changes between admin and frontend data\n    detectChanges(adminData, frontendData) {\n        const changes = [];\n        // Compare quiz data\n        changes.push(...this.compareQuizData(adminData.quiz, frontendData.quiz));\n        // Compare rewards data\n        changes.push(...this.compareRewardsData(adminData.rewards, frontendData.rewards));\n        // Compare system settings\n        changes.push(...this.compareSystemSettings(adminData.systemSettings, frontendData.systemSettings));\n        return changes;\n    }\n    // Compare quiz data\n    compareQuizData(admin, frontend) {\n        const changes = [];\n        // Compare questions\n        if (JSON.stringify(admin.questions) !== JSON.stringify(frontend.questions)) {\n            changes.push({\n                category: 'quiz',\n                field: 'questions',\n                action: 'modify',\n                oldValue: frontend.questions,\n                newValue: admin.questions,\n                riskLevel: admin.questions.length < frontend.questions.length ? 'destructive' : 'caution',\n                impact: \"Questions: \".concat(frontend.questions.length, \" → \").concat(admin.questions.length)\n            });\n        }\n        // Compare categories\n        if (JSON.stringify(admin.categories) !== JSON.stringify(frontend.categories)) {\n            changes.push({\n                category: 'quiz',\n                field: 'categories',\n                action: 'modify',\n                oldValue: frontend.categories,\n                newValue: admin.categories,\n                riskLevel: 'safe',\n                impact: \"Categories: \".concat(frontend.categories.length, \" → \").concat(admin.categories.length)\n            });\n        }\n        // Compare settings\n        if (JSON.stringify(admin.settings) !== JSON.stringify(frontend.settings)) {\n            changes.push({\n                category: 'quiz',\n                field: 'settings',\n                action: 'modify',\n                oldValue: frontend.settings,\n                newValue: admin.settings,\n                riskLevel: 'caution',\n                impact: 'Quiz settings configuration updated'\n            });\n        }\n        return changes;\n    }\n    // Compare rewards data\n    compareRewardsData(admin, frontend) {\n        const changes = [];\n        // Compare achievements\n        if (JSON.stringify(admin.achievements) !== JSON.stringify(frontend.achievements)) {\n            changes.push({\n                category: 'rewards',\n                field: 'achievements',\n                action: 'modify',\n                oldValue: frontend.achievements,\n                newValue: admin.achievements,\n                riskLevel: 'safe',\n                impact: \"Achievements: \".concat(frontend.achievements.length, \" → \").concat(admin.achievements.length)\n            });\n        }\n        // Compare popup settings\n        if (JSON.stringify(admin.popupSettings) !== JSON.stringify(frontend.popupSettings)) {\n            changes.push({\n                category: 'rewards',\n                field: 'popupSettings',\n                action: 'modify',\n                oldValue: frontend.popupSettings,\n                newValue: admin.popupSettings,\n                riskLevel: 'caution',\n                impact: 'Reward popup configuration updated'\n            });\n        }\n        // Compare coin multipliers\n        if (JSON.stringify(admin.coinMultipliers) !== JSON.stringify(frontend.coinMultipliers)) {\n            changes.push({\n                category: 'rewards',\n                field: 'coinMultipliers',\n                action: 'modify',\n                oldValue: frontend.coinMultipliers,\n                newValue: admin.coinMultipliers,\n                riskLevel: 'caution',\n                impact: 'Coin multiplier settings updated'\n            });\n        }\n        return changes;\n    }\n    // Compare system settings\n    compareSystemSettings(admin, frontend) {\n        const changes = [];\n        // Compare feature flags\n        if (JSON.stringify(admin.featureFlags) !== JSON.stringify(frontend.featureFlags)) {\n            changes.push({\n                category: 'systemSettings',\n                field: 'featureFlags',\n                action: 'modify',\n                oldValue: frontend.featureFlags,\n                newValue: admin.featureFlags,\n                riskLevel: 'caution',\n                impact: 'Feature flags configuration updated'\n            });\n        }\n        // Compare config values\n        if (JSON.stringify(admin.configValues) !== JSON.stringify(frontend.configValues)) {\n            changes.push({\n                category: 'systemSettings',\n                field: 'configValues',\n                action: 'modify',\n                oldValue: frontend.configValues,\n                newValue: admin.configValues,\n                riskLevel: 'caution',\n                impact: 'System configuration values updated'\n            });\n        }\n        // Compare ads config\n        if (JSON.stringify(admin.adsConfig) !== JSON.stringify(frontend.adsConfig)) {\n            changes.push({\n                category: 'systemSettings',\n                field: 'adsConfig',\n                action: 'modify',\n                oldValue: frontend.adsConfig,\n                newValue: admin.adsConfig,\n                riskLevel: 'safe',\n                impact: 'Ads configuration updated'\n            });\n        }\n        return changes;\n    }\n    // Detect conflicts between admin and frontend data\n    detectConflicts(adminData, frontendData) {\n        const conflicts = [];\n        // Check for timestamp conflicts\n        Object.keys(adminData).forEach((category)=>{\n            const adminCat = adminData[category];\n            const frontendCat = frontendData[category];\n            if (adminCat.lastModified > 0 && frontendCat.lastModified > 0) {\n                const timeDiff = Math.abs(adminCat.lastModified - frontendCat.lastModified);\n                // If both were modified within 5 minutes of each other, it's a potential conflict\n                if (timeDiff < 300000 && adminCat.version !== frontendCat.version) {\n                    conflicts.push({\n                        field: \"\".concat(category, \".version\"),\n                        adminValue: adminCat.version,\n                        frontendValue: frontendCat.version,\n                        adminTimestamp: adminCat.lastModified,\n                        frontendTimestamp: frontendCat.lastModified,\n                        resolution: adminCat.lastModified > frontendCat.lastModified ? 'use-admin' : 'use-frontend'\n                    });\n                }\n            }\n        });\n        return conflicts;\n    }\n    // Assess data freshness\n    assessDataFreshness(timestamp) {\n        const now = Date.now();\n        const age = now - timestamp;\n        if (age < 300000) return 'fresh' // < 5 minutes\n        ;\n        if (age < 1800000) return 'stale' // < 30 minutes\n        ;\n        return 'outdated' // > 30 minutes\n        ;\n    }\n    // Generate sync preview\n    async generateSyncPreview(operation) {\n        const startTime = performance.now();\n        console.log(\"\\uD83D\\uDD04 Generating sync preview for operation: \".concat(operation));\n        const adminData = this.getAdminConfigData();\n        const frontendData = this.getFrontendConfigData();\n        let changes = [];\n        let direction = 'bidirectional';\n        switch(operation){\n            case 'pull':\n                changes = this.detectChanges(frontendData, adminData);\n                direction = 'frontend-to-admin';\n                break;\n            case 'push':\n                changes = this.detectChanges(adminData, frontendData);\n                direction = 'admin-to-frontend';\n                break;\n            case 'smart':\n                changes = this.detectChanges(adminData, frontendData);\n                direction = 'bidirectional';\n                break;\n            case 'reset':\n                changes = this.detectChanges(adminData, frontendData);\n                direction = 'admin-to-frontend';\n                break;\n        }\n        const conflicts = this.detectConflicts(adminData, frontendData);\n        const syncOperation = {\n            id: \"sync-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 8)),\n            type: operation,\n            direction,\n            timestamp: Date.now(),\n            changes,\n            status: 'pending',\n            riskLevel: this.calculateOverallRiskLevel(changes),\n            performanceMetrics: {\n                duration: performance.now() - startTime,\n                dataSize: JSON.stringify({\n                    adminData,\n                    frontendData\n                }).length,\n                conflictsResolved: conflicts.length\n            }\n        };\n        const preview = {\n            operation: syncOperation,\n            conflicts,\n            summary: {\n                totalChanges: changes.length,\n                safeChanges: changes.filter((c)=>c.riskLevel === 'safe').length,\n                cautionChanges: changes.filter((c)=>c.riskLevel === 'caution').length,\n                destructiveChanges: changes.filter((c)=>c.riskLevel === 'destructive').length,\n                estimatedDuration: this.estimateSyncDuration(changes)\n            },\n            dataFreshness: {\n                admin: this.assessDataFreshness(Math.max(adminData.quiz.lastModified, adminData.rewards.lastModified, adminData.systemSettings.lastModified)),\n                frontend: this.assessDataFreshness(Math.max(frontendData.quiz.lastModified, frontendData.rewards.lastModified, frontendData.systemSettings.lastModified))\n            }\n        };\n        console.log(\"\\uD83D\\uDD04 Sync preview generated in \".concat(preview.operation.performanceMetrics.duration.toFixed(2), \"ms\"));\n        return preview;\n    }\n    // Calculate overall risk level\n    calculateOverallRiskLevel(changes) {\n        if (changes.some((c)=>c.riskLevel === 'destructive')) return 'destructive';\n        if (changes.some((c)=>c.riskLevel === 'caution')) return 'caution';\n        return 'safe';\n    }\n    // Estimate sync duration\n    estimateSyncDuration(changes) {\n        // Base time + time per change\n        return 100 + changes.length * 50 // milliseconds\n        ;\n    }\n    // Setup storage listeners for real-time updates\n    setupStorageListeners() {\n        if (false) {}\n        window.addEventListener('storage', (e)=>{\n            var _e_key, _e_key1;\n            if (((_e_key = e.key) === null || _e_key === void 0 ? void 0 : _e_key.startsWith('admin_')) || ((_e_key1 = e.key) === null || _e_key1 === void 0 ? void 0 : _e_key1.startsWith('game_'))) {\n                console.log('🔄 Storage change detected, updating sync preview:', e.key);\n                this.notifyListeners();\n            }\n        });\n    }\n    // Load sync history from localStorage\n    loadSyncHistory() {\n        try {\n            const history = localStorage.getItem('bidirectional_sync_history');\n            if (history) {\n                this.syncHistory = JSON.parse(history);\n            }\n        } catch (error) {\n            console.error('Error loading sync history:', error);\n            this.syncHistory = {\n                operations: [],\n                rollbackPoints: []\n            };\n        }\n    }\n    // Save sync history to localStorage\n    saveSyncHistory() {\n        try {\n            localStorage.setItem('bidirectional_sync_history', JSON.stringify(this.syncHistory));\n        } catch (error) {\n            console.error('Error saving sync history:', error);\n        }\n    }\n    // Add sync listener\n    addSyncListener(callback) {\n        this.listeners.push(callback);\n    }\n    // Remove sync listener\n    removeSyncListener(callback) {\n        const index = this.listeners.indexOf(callback);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n    // Notify all listeners\n    async notifyListeners() {\n        if (this.listeners.length > 0) {\n            try {\n                const preview = await this.generateSyncPreview('smart');\n                this.listeners.forEach((callback)=>{\n                    try {\n                        callback(preview);\n                    } catch (error) {\n                        console.error('Error in sync listener:', error);\n                    }\n                });\n            } catch (error) {\n                console.error('Error generating preview for listeners:', error);\n            }\n        }\n    }\n    // Get sync history\n    getSyncHistory() {\n        return {\n            ...this.syncHistory\n        };\n    }\n    // Execute sync operation\n    async executeSyncOperation(preview) {\n        if (this.isOperationInProgress) {\n            return {\n                success: false,\n                message: 'Another sync operation is in progress',\n                operation: preview.operation\n            };\n        }\n        this.isOperationInProgress = true;\n        const startTime = performance.now();\n        try {\n            console.log(\"\\uD83D\\uDD04 Executing sync operation: \".concat(preview.operation.type));\n            // Create rollback point\n            await this.createRollbackPoint(\"Before \".concat(preview.operation.type, \" operation\"));\n            // Apply changes based on operation type\n            switch(preview.operation.type){\n                case 'pull':\n                    await this.syncFromFrontend(preview.operation.changes);\n                    break;\n                case 'push':\n                    await this.syncToFrontend(preview.operation.changes);\n                    break;\n                case 'smart':\n                    await this.smartSync(preview.operation.changes, preview.conflicts);\n                    break;\n                case 'reset':\n                    await this.resetFrontend();\n                    break;\n            }\n            // Update operation status\n            preview.operation.status = 'completed';\n            preview.operation.performanceMetrics.duration = performance.now() - startTime;\n            // Add to history\n            this.syncHistory.operations.push(preview.operation);\n            this.saveSyncHistory();\n            console.log(\"\\uD83D\\uDD04 Sync operation completed in \".concat(preview.operation.performanceMetrics.duration.toFixed(2), \"ms\"));\n            return {\n                success: true,\n                message: \"\".concat(preview.operation.type, \" operation completed successfully\"),\n                operation: preview.operation\n            };\n        } catch (error) {\n            console.error('🔄 Sync operation failed:', error);\n            // Mark operation as failed\n            preview.operation.status = 'failed';\n            preview.operation.performanceMetrics.duration = performance.now() - startTime;\n            // Add to history\n            this.syncHistory.operations.push(preview.operation);\n            this.saveSyncHistory();\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Sync operation failed',\n                operation: preview.operation\n            };\n        } finally{\n            this.isOperationInProgress = false;\n        }\n    }\n    // Sync from frontend to admin\n    async syncFromFrontend(changes) {\n        const frontendData = this.getFrontendConfigData();\n        for (const change of changes){\n            switch(change.category){\n                case 'quiz':\n                    await this.applyQuizChanges(change, frontendData.quiz);\n                    break;\n                case 'rewards':\n                    await this.applyRewardChanges(change, frontendData.rewards);\n                    break;\n                case 'systemSettings':\n                    await this.applySystemSettingsChanges(change, frontendData.systemSettings);\n                    break;\n            }\n        }\n        // Update admin timestamps\n        localStorage.setItem('admin_last_sync_from_frontend', Date.now().toString());\n    }\n    // Sync from admin to frontend\n    async syncToFrontend(changes) {\n        const adminData = this.getAdminConfigData();\n        for (const change of changes){\n            switch(change.category){\n                case 'quiz':\n                    await this.pushQuizToFrontend(adminData.quiz);\n                    break;\n                case 'rewards':\n                    await this.pushRewardsToFrontend(adminData.rewards);\n                    break;\n                case 'systemSettings':\n                    await this.pushSystemSettingsToFrontend(adminData.systemSettings);\n                    break;\n            }\n        }\n        // Update frontend timestamps\n        localStorage.setItem('game_last_sync', Date.now().toString());\n    }\n    // Smart sync with conflict resolution\n    async smartSync(changes, conflicts) {\n        // Resolve conflicts first\n        for (const conflict of conflicts){\n            await this.resolveConflict(conflict);\n        }\n        // Apply non-conflicting changes\n        const nonConflictingChanges = changes.filter((change)=>!conflicts.some((conflict)=>conflict.field.includes(change.field)));\n        await this.syncToFrontend(nonConflictingChanges);\n    }\n    // Reset frontend with admin data\n    async resetFrontend() {\n        const adminData = this.getAdminConfigData();\n        // Push all admin data to frontend\n        await this.pushQuizToFrontend(adminData.quiz);\n        await this.pushRewardsToFrontend(adminData.rewards);\n        await this.pushSystemSettingsToFrontend(adminData.systemSettings);\n        // Update timestamps\n        localStorage.setItem('game_last_sync', Date.now().toString());\n        localStorage.setItem('game_reset_timestamp', Date.now().toString());\n    }\n    // Apply quiz changes to admin\n    async applyQuizChanges(change, frontendQuizData) {\n        switch(change.field){\n            case 'questions':\n                // Update admin questions with frontend data\n                localStorage.setItem('admin_quiz_questions', JSON.stringify(frontendQuizData.questions));\n                break;\n            case 'categories':\n                localStorage.setItem('admin_quiz_categories', JSON.stringify(frontendQuizData.categories));\n                break;\n            case 'settings':\n                localStorage.setItem('admin_quiz_settings', JSON.stringify(frontendQuizData.settings));\n                break;\n        }\n        localStorage.setItem('admin_quiz_questions_updated', Date.now().toString());\n    }\n    // Apply reward changes to admin\n    async applyRewardChanges(change, frontendRewardData) {\n        switch(change.field){\n            case 'achievements':\n                localStorage.setItem('admin_reward_achievements', JSON.stringify(frontendRewardData.achievements));\n                break;\n            case 'popupSettings':\n                localStorage.setItem('admin_reward_popup_settings', JSON.stringify(frontendRewardData.popupSettings));\n                break;\n            case 'coinMultipliers':\n                localStorage.setItem('admin_reward_coin_multipliers', JSON.stringify(frontendRewardData.coinMultipliers));\n                break;\n        }\n        localStorage.setItem('admin_reward_config_updated', Date.now().toString());\n    }\n    // Apply system settings changes to admin\n    async applySystemSettingsChanges(change, frontendSettingsData) {\n        switch(change.field){\n            case 'featureFlags':\n                localStorage.setItem('admin_feature_flags', JSON.stringify(frontendSettingsData.featureFlags));\n                break;\n            case 'configValues':\n                localStorage.setItem('admin_system_settings', JSON.stringify(frontendSettingsData.configValues));\n                break;\n            case 'adsConfig':\n                localStorage.setItem('admin_ads_config', JSON.stringify(frontendSettingsData.adsConfig));\n                break;\n        }\n        localStorage.setItem('admin_settings_updated', Date.now().toString());\n    }\n    // Push quiz data to frontend\n    async pushQuizToFrontend(adminQuizData) {\n        localStorage.setItem('game_quiz_data', JSON.stringify(adminQuizData.questions));\n        localStorage.setItem('game_categories', JSON.stringify(adminQuizData.categories));\n        localStorage.setItem('game_quiz_settings', JSON.stringify(adminQuizData.settings));\n        localStorage.setItem('game_quiz_version', adminQuizData.version);\n    }\n    // Push rewards data to frontend\n    async pushRewardsToFrontend(adminRewardData) {\n        localStorage.setItem('game_reward_data', JSON.stringify(adminRewardData.achievements));\n        localStorage.setItem('game_popup_settings', JSON.stringify(adminRewardData.popupSettings));\n        localStorage.setItem('game_coin_multipliers', JSON.stringify(adminRewardData.coinMultipliers));\n        localStorage.setItem('game_rewards_version', adminRewardData.version);\n        localStorage.setItem('game_rewards_sync', Date.now().toString());\n    }\n    // Push system settings to frontend\n    async pushSystemSettingsToFrontend(adminSettingsData) {\n        localStorage.setItem('game_feature_flags', JSON.stringify(adminSettingsData.featureFlags));\n        localStorage.setItem('game_settings_data', JSON.stringify(adminSettingsData.configValues));\n        localStorage.setItem('game_ads_config', JSON.stringify(adminSettingsData.adsConfig));\n        localStorage.setItem('game_settings_version', adminSettingsData.version);\n        localStorage.setItem('game_settings_sync', Date.now().toString());\n    }\n    // Resolve conflict\n    async resolveConflict(conflict) {\n        console.log(\"\\uD83D\\uDD04 Resolving conflict for \".concat(conflict.field, \": \").concat(conflict.resolution));\n        switch(conflict.resolution){\n            case 'use-admin':\n                break;\n            case 'use-frontend':\n                break;\n            case 'merge':\n                // Use merged value if available\n                if (conflict.mergedValue) {\n                // Apply merged value to both admin and frontend\n                }\n                break;\n            case 'manual':\n                // Manual resolution required - throw error to prompt user\n                throw new Error(\"Manual resolution required for \".concat(conflict.field));\n        }\n    }\n    // Create rollback point\n    async createRollbackPoint(description) {\n        const configSnapshot = this.getAdminConfigData();\n        const rollbackPoint = {\n            id: \"rollback-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 8)),\n            timestamp: Date.now(),\n            description,\n            configSnapshot\n        };\n        this.syncHistory.rollbackPoints.push(rollbackPoint);\n        // Keep only last 10 rollback points\n        if (this.syncHistory.rollbackPoints.length > 10) {\n            this.syncHistory.rollbackPoints = this.syncHistory.rollbackPoints.slice(-10);\n        }\n        this.saveSyncHistory();\n        console.log(\"\\uD83D\\uDD04 Rollback point created: \".concat(description));\n    }\n    // Rollback to specific point\n    async rollbackToPoint(rollbackId) {\n        try {\n            const rollbackPoint = this.syncHistory.rollbackPoints.find((rp)=>rp.id === rollbackId);\n            if (!rollbackPoint) {\n                return {\n                    success: false,\n                    message: 'Rollback point not found'\n                };\n            }\n            console.log(\"\\uD83D\\uDD04 Rolling back to: \".concat(rollbackPoint.description));\n            // Restore admin configuration\n            const config = rollbackPoint.configSnapshot;\n            // Restore quiz data\n            localStorage.setItem('admin_quiz_questions', JSON.stringify(config.quiz.questions));\n            localStorage.setItem('admin_quiz_categories', JSON.stringify(config.quiz.categories));\n            localStorage.setItem('admin_quiz_settings', JSON.stringify(config.quiz.settings));\n            // Restore reward data\n            localStorage.setItem('admin_reward_achievements', JSON.stringify(config.rewards.achievements));\n            localStorage.setItem('admin_reward_popup_settings', JSON.stringify(config.rewards.popupSettings));\n            localStorage.setItem('admin_reward_coin_multipliers', JSON.stringify(config.rewards.coinMultipliers));\n            // Restore system settings\n            localStorage.setItem('admin_feature_flags', JSON.stringify(config.systemSettings.featureFlags));\n            localStorage.setItem('admin_system_settings', JSON.stringify(config.systemSettings.configValues));\n            localStorage.setItem('admin_ads_config', JSON.stringify(config.systemSettings.adsConfig));\n            // Update timestamps\n            localStorage.setItem('admin_rollback_timestamp', Date.now().toString());\n            // Create operation record\n            const rollbackOperation = {\n                id: \"rollback-op-\".concat(Date.now()),\n                type: 'push',\n                direction: 'admin-to-frontend',\n                timestamp: Date.now(),\n                changes: [],\n                status: 'completed',\n                riskLevel: 'caution',\n                performanceMetrics: {\n                    duration: 0,\n                    dataSize: JSON.stringify(config).length,\n                    conflictsResolved: 0\n                }\n            };\n            this.syncHistory.operations.push(rollbackOperation);\n            this.saveSyncHistory();\n            return {\n                success: true,\n                message: \"Successfully rolled back to: \".concat(rollbackPoint.description)\n            };\n        } catch (error) {\n            console.error('🔄 Rollback failed:', error);\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Rollback failed'\n            };\n        }\n    }\n    // Get last operation\n    getLastOperation() {\n        return this.syncHistory.operations.length > 0 ? this.syncHistory.operations[this.syncHistory.operations.length - 1] : null;\n    }\n    // Undo last sync\n    async undoLastSync() {\n        const lastOperation = this.getLastOperation();\n        if (!lastOperation) {\n            return {\n                success: false,\n                message: 'No sync operations to undo'\n            };\n        }\n        if (lastOperation.status === 'rolled-back') {\n            return {\n                success: false,\n                message: 'Last operation was already rolled back'\n            };\n        }\n        // Find the rollback point before the last operation\n        const rollbackPoint = this.syncHistory.rollbackPoints.filter((rp)=>rp.timestamp < lastOperation.timestamp).sort((a, b)=>b.timestamp - a.timestamp)[0];\n        if (!rollbackPoint) {\n            return {\n                success: false,\n                message: 'No rollback point available before last operation'\n            };\n        }\n        const result = await this.rollbackToPoint(rollbackPoint.id);\n        if (result.success) {\n            // Mark last operation as rolled back\n            lastOperation.status = 'rolled-back';\n            this.saveSyncHistory();\n        }\n        return result;\n    }\n    // Check if operation is in progress\n    isOperationInProgress() {\n        return this.isOperationInProgress;\n    }\n    constructor(){\n        this.syncHistory = {\n            operations: [],\n            rollbackPoints: []\n        };\n        this.listeners = [];\n        this.isOperationInProgress = false;\n        if (true) {\n            this.loadSyncHistory();\n            this.setupStorageListeners();\n        }\n    }\n}\n// Export singleton instance\nconst bidirectionalSync = BidirectionalSyncService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/bidirectionalSync.ts\n"));

/***/ })

});