"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/jaseemadmin/page",{

/***/ "(app-pages-browser)/./src/utils/integrationService.ts":
/*!*****************************************!*\
  !*** ./src/utils/integrationService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIntegrationService: () => (/* binding */ getIntegrationService),\n/* harmony export */   integrationService: () => (/* binding */ integrationService)\n/* harmony export */ });\n/* harmony import */ var _settingsDataManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settingsDataManager */ \"(app-pages-browser)/./src/utils/settingsDataManager.ts\");\n\n// Integration service for handling real API connections and third-party services\nclass IntegrationService {\n    static getInstance() {\n        if (!IntegrationService.instance) {\n            IntegrationService.instance = new IntegrationService();\n        }\n        return IntegrationService.instance;\n    }\n    loadSettings() {\n        try {\n            this.settings = _settingsDataManager__WEBPACK_IMPORTED_MODULE_0__.settingsDataManager.getIntegrationSettings();\n        } catch (error) {\n            console.error('Failed to load integration settings:', error);\n        }\n    }\n    // API Configuration Methods\n    async testApiConnection() {\n        var _this_settings;\n        if (!((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : _this_settings.apiConfiguration.baseUrl)) {\n            return {\n                success: false,\n                message: 'API base URL not configured'\n            };\n        }\n        const startTime = Date.now();\n        try {\n            const response = await fetch(\"\".concat(this.settings.apiConfiguration.baseUrl, \"/health\"), {\n                method: 'GET',\n                headers: {\n                    'Authorization': \"Bearer \".concat(this.settings.apiConfiguration.apiKey),\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(this.settings.apiConfiguration.timeout)\n            });\n            const responseTime = Date.now() - startTime;\n            if (response.ok) {\n                return {\n                    success: true,\n                    message: 'API connection successful',\n                    responseTime\n                };\n            } else {\n                return {\n                    success: false,\n                    message: \"API returned \".concat(response.status, \": \").concat(response.statusText)\n                };\n            }\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Connection failed',\n                responseTime\n            };\n        }\n    }\n    async makeApiRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        var _this_settings;\n        if (!((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : _this_settings.apiConfiguration.baseUrl)) {\n            throw new Error('API base URL not configured');\n        }\n        const url = \"\".concat(this.settings.apiConfiguration.baseUrl).concat(endpoint);\n        const headers = {\n            'Authorization': \"Bearer \".concat(this.settings.apiConfiguration.apiKey),\n            'Content-Type': 'application/json',\n            ...options.headers\n        };\n        const response = await fetch(url, {\n            ...options,\n            headers,\n            signal: AbortSignal.timeout(this.settings.apiConfiguration.timeout)\n        });\n        if (!response.ok) {\n            throw new Error(\"API request failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response.json();\n    }\n    // Webhook Methods\n    async registerWebhook(url, events) {\n        try {\n            const response = await this.makeApiRequest('/webhooks', {\n                method: 'POST',\n                body: JSON.stringify({\n                    url,\n                    events,\n                    active: true\n                })\n            });\n            return {\n                success: true,\n                webhookId: response.id,\n                message: 'Webhook registered successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Failed to register webhook'\n            };\n        }\n    }\n    async testWebhook(url) {\n        try {\n            const testPayload = {\n                event: 'test',\n                timestamp: new Date().toISOString(),\n                data: {\n                    message: 'This is a test webhook from TechKwiz'\n                }\n            };\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(testPayload),\n                signal: AbortSignal.timeout(10000) // 10 second timeout\n            });\n            if (response.ok) {\n                return {\n                    success: true,\n                    message: 'Webhook test successful'\n                };\n            } else {\n                return {\n                    success: false,\n                    message: \"Webhook returned \".concat(response.status)\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Webhook test failed'\n            };\n        }\n    }\n    // Social Media Integration Methods\n    async connectSocialMedia(platform, credentials) {\n        try {\n            // In a real implementation, this would handle OAuth flows\n            const response = await this.makeApiRequest('/social/connect', {\n                method: 'POST',\n                body: JSON.stringify({\n                    platform,\n                    credentials\n                })\n            });\n            return {\n                success: true,\n                message: \"Successfully connected to \".concat(platform)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : \"Failed to connect to \".concat(platform)\n            };\n        }\n    }\n    async postToSocialMedia(platform, content, media) {\n        try {\n            const response = await this.makeApiRequest('/social/post', {\n                method: 'POST',\n                body: JSON.stringify({\n                    platform,\n                    content,\n                    media\n                })\n            });\n            return {\n                success: true,\n                postId: response.postId,\n                message: 'Post published successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Failed to publish post'\n            };\n        }\n    }\n    // Analytics Integration Methods\n    async sendAnalyticsEvent(event, properties) {\n        var _this_settings;\n        if (!((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : _this_settings.analytics.googleAnalytics.enabled)) {\n            return;\n        }\n        try {\n            // Google Analytics 4 event tracking\n            if (typeof gtag !== 'undefined') {\n                gtag('event', event, properties);\n            }\n            // Custom analytics endpoint\n            if (this.settings.analytics.customAnalytics.enabled) {\n                await this.makeApiRequest('/analytics/events', {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        event,\n                        properties,\n                        timestamp: new Date().toISOString()\n                    })\n                });\n            }\n        } catch (error) {\n            console.error('Failed to send analytics event:', error);\n        }\n    }\n    // Notification Methods\n    async sendNotification(type, recipient, message, subject) {\n        try {\n            const response = await this.makeApiRequest('/notifications/send', {\n                method: 'POST',\n                body: JSON.stringify({\n                    type,\n                    recipient,\n                    message,\n                    subject\n                })\n            });\n            return {\n                success: true,\n                message: 'Notification sent successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Failed to send notification'\n            };\n        }\n    }\n    // AdSense Integration Methods\n    async initializeAdSense() {\n        var _this_settings;\n        if (!((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : _this_settings.adSense.enabled) || !this.settings.adSense.publisherId) {\n            return {\n                success: false,\n                message: 'AdSense not configured'\n            };\n        }\n        try {\n            // Load AdSense script dynamically\n            const script = document.createElement('script');\n            script.async = true;\n            script.src = \"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-\".concat(this.settings.adSense.publisherId);\n            script.crossOrigin = 'anonymous';\n            document.head.appendChild(script);\n            return {\n                success: true,\n                message: 'AdSense initialized successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Failed to initialize AdSense'\n            };\n        }\n    }\n    async displayAd(adSlotId, containerId) {\n        var _this_settings;\n        if (!((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : _this_settings.adSense.enabled)) {\n            return {\n                success: false,\n                message: 'AdSense not enabled'\n            };\n        }\n        try {\n            const adContainer = document.getElementById(containerId);\n            if (!adContainer) {\n                return {\n                    success: false,\n                    message: 'Ad container not found'\n                };\n            }\n            // Create ad element\n            const adElement = document.createElement('ins');\n            adElement.className = 'adsbygoogle';\n            adElement.style.display = 'block';\n            adElement.setAttribute('data-ad-client', \"ca-pub-\".concat(this.settings.adSense.publisherId));\n            adElement.setAttribute('data-ad-slot', adSlotId);\n            adElement.setAttribute('data-ad-format', 'auto');\n            adContainer.appendChild(adElement);\n            // Push ad to AdSense\n            if (typeof adsbygoogle !== 'undefined') {\n                adsbygoogle.push({});\n            }\n            return {\n                success: true,\n                message: 'Ad displayed successfully'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : 'Failed to display ad'\n            };\n        }\n    }\n    // Utility Methods\n    refreshSettings() {\n        this.loadSettings();\n    }\n    getConnectionStatus() {\n        if (!this.settings) return {};\n        return {\n            api: !!this.settings.apiConfiguration.baseUrl && !!this.settings.apiConfiguration.apiKey,\n            webhooks: this.settings.webhooks.endpoints.length > 0,\n            socialMedia: Object.values(this.settings.socialMedia).some((platform)=>platform.enabled),\n            analytics: this.settings.analytics.googleAnalytics.enabled || this.settings.analytics.customAnalytics.enabled,\n            notifications: Object.values(this.settings.notifications).some((service)=>service.enabled),\n            adSense: this.settings.adSense.enabled\n        };\n    }\n    constructor(){\n        this.settings = null;\n        this.loadSettings();\n    }\n}\n// Export a function to get the service instance (lazy initialization)\nconst getIntegrationService = ()=>{\n    if (false) {}\n    return IntegrationService.getInstance();\n};\n// For backward compatibility\nconst integrationService = getIntegrationService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/integrationService.ts\n"));

/***/ })

});