"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/api.ts":
/*!**************************!*\
  !*** ./src/utils/api.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiRequest: () => (/* binding */ apiRequest),\n/* harmony export */   apiRequestJson: () => (/* binding */ apiRequestJson),\n/* harmony export */   getBackendUrl: () => (/* binding */ getBackendUrl)\n/* harmony export */ });\n/**\n * API utilities for TechKwiz frontend\n * Handles backend URL detection and API calls with proper error handling\n */ /**\n * Get the correct backend URL based on environment\n */ function getBackendUrl() {\n    // If environment variable is set and not empty, use it\n    if (false) {}\n    // For Next.js apps with proxy configuration, use empty string for relative paths\n    // This will use the Next.js rewrites to proxy to localhost:8001\n    if (true) {\n        return '' // Relative URLs will be proxied by Next.js\n        ;\n    }\n    // Fallback to localhost for server-side rendering\n    return 'http://localhost:8001';\n}\n/**\n * Make API request with proper error handling and timeout\n */ async function apiRequest(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const backendUrl = getBackendUrl();\n    const url = endpoint.startsWith('http') ? endpoint : \"\".concat(backendUrl).concat(endpoint.startsWith('/') ? '' : '/').concat(endpoint);\n    const defaultOptions = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        },\n        signal: AbortSignal.timeout(10000),\n        ...options\n    };\n    console.log(\"\\uD83C\\uDF10 API Request: \".concat(options.method || 'GET', \" \").concat(url));\n    try {\n        const response = await fetch(url, defaultOptions);\n        if (!response.ok) {\n            console.error(\"❌ API Error: \".concat(response.status, \" \").concat(response.statusText));\n            throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n        }\n        console.log(\"✅ API Success: \".concat(options.method || 'GET', \" \").concat(url));\n        return response;\n    } catch (error) {\n        console.error(\"❌ API Request Failed: \".concat(url), error);\n        throw error;\n    }\n}\n/**\n * Make API request and return JSON with error handling\n */ async function apiRequestJson(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const response = await apiRequest(endpoint, options);\n    return response.json();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRUQ7O0NBRUMsR0FDTSxTQUFTQTtJQUNkLHVEQUF1RDtJQUN2RCxJQUFJQyxLQUF3RixFQUFFLEVBRTdGO0lBRUQsaUZBQWlGO0lBQ2pGLGdFQUFnRTtJQUNoRSxJQUFJLElBQTZCLEVBQUU7UUFDakMsT0FBTyxHQUFHLDJDQUEyQzs7SUFDdkQ7SUFFQSxrREFBa0Q7SUFDbEQsT0FBTztBQUNUO0FBRUE7O0NBRUMsR0FDTSxlQUFlSSxXQUFXQyxRQUFnQjtRQUFFQyxVQUFBQSxpRUFBdUIsQ0FBQztJQUN6RSxNQUFNQyxhQUFhUjtJQUNuQixNQUFNUyxNQUFNSCxTQUFTSSxVQUFVLENBQUMsVUFBVUosV0FBVyxHQUFnQkEsT0FBYkUsWUFBbURGLE9BQXRDQSxTQUFTSSxVQUFVLENBQUMsT0FBTyxLQUFLLEtBQWUsT0FBVEo7SUFFM0csTUFBTUssaUJBQThCO1FBQ2xDQyxRQUFRO1FBQ1JDLFNBQVM7WUFDUCxnQkFBZ0I7WUFDaEIsR0FBR04sUUFBUU0sT0FBTztRQUNwQjtRQUNBQyxRQUFRQyxZQUFZQyxPQUFPLENBQUM7UUFDNUIsR0FBR1QsT0FBTztJQUNaO0lBRUFVLFFBQVFDLEdBQUcsQ0FBQyw2QkFBOENULE9BQTNCRixRQUFRSyxNQUFNLElBQUksT0FBTSxLQUFPLE9BQUpIO0lBRTFELElBQUk7UUFDRixNQUFNVSxXQUFXLE1BQU1DLE1BQU1YLEtBQUtFO1FBRWxDLElBQUksQ0FBQ1EsU0FBU0UsRUFBRSxFQUFFO1lBQ2hCSixRQUFRSyxLQUFLLENBQUMsZ0JBQW1DSCxPQUFuQkEsU0FBU0ksTUFBTSxFQUFDLEtBQXVCLE9BQXBCSixTQUFTSyxVQUFVO1lBQ3BFLE1BQU0sSUFBSUMsTUFBTSxRQUE0Qk4sT0FBcEJBLFNBQVNJLE1BQU0sRUFBQyxNQUF3QixPQUFwQkosU0FBU0ssVUFBVTtRQUNqRTtRQUVBUCxRQUFRQyxHQUFHLENBQUMsa0JBQTZDVCxPQUEzQkYsUUFBUUssTUFBTSxJQUFJLE9BQU0sS0FBTyxPQUFKSDtRQUN6RCxPQUFPVTtJQUNULEVBQUUsT0FBT0csT0FBTztRQUNkTCxRQUFRSyxLQUFLLENBQUMseUJBQTZCLE9BQUpiLE1BQU9hO1FBQzlDLE1BQU1BO0lBQ1I7QUFDRjtBQUVBOztDQUVDLEdBQ00sZUFBZUksZUFBd0JwQixRQUFnQjtRQUFFQyxVQUFBQSxpRUFBdUIsQ0FBQztJQUN0RixNQUFNWSxXQUFXLE1BQU1kLFdBQVdDLFVBQVVDO0lBQzVDLE9BQU9ZLFNBQVNRLElBQUk7QUFDdEIiLCJzb3VyY2VzIjpbIi9hcHAvZnJvbnRlbmQvc3JjL3V0aWxzL2FwaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSB1dGlsaXRpZXMgZm9yIFRlY2hLd2l6IGZyb250ZW5kXG4gKiBIYW5kbGVzIGJhY2tlbmQgVVJMIGRldGVjdGlvbiBhbmQgQVBJIGNhbGxzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIGNvcnJlY3QgYmFja2VuZCBVUkwgYmFzZWQgb24gZW52aXJvbm1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhY2tlbmRVcmwoKTogc3RyaW5nIHtcbiAgLy8gSWYgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgc2V0IGFuZCBub3QgZW1wdHksIHVzZSBpdFxuICBpZiAocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQkFDS0VORF9VUkwgJiYgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQkFDS0VORF9VUkwudHJpbSgpICE9PSAnJykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19CQUNLRU5EX1VSTFxuICB9XG4gIFxuICAvLyBGb3IgTmV4dC5qcyBhcHBzIHdpdGggcHJveHkgY29uZmlndXJhdGlvbiwgdXNlIGVtcHR5IHN0cmluZyBmb3IgcmVsYXRpdmUgcGF0aHNcbiAgLy8gVGhpcyB3aWxsIHVzZSB0aGUgTmV4dC5qcyByZXdyaXRlcyB0byBwcm94eSB0byBsb2NhbGhvc3Q6ODAwMVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJycgLy8gUmVsYXRpdmUgVVJMcyB3aWxsIGJlIHByb3hpZWQgYnkgTmV4dC5qc1xuICB9XG4gIFxuICAvLyBGYWxsYmFjayB0byBsb2NhbGhvc3QgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZ1xuICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMSdcbn1cblxuLyoqXG4gKiBNYWtlIEFQSSByZXF1ZXN0IHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nIGFuZCB0aW1lb3V0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcGlSZXF1ZXN0KGVuZHBvaW50OiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge30pOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gIGNvbnN0IGJhY2tlbmRVcmwgPSBnZXRCYWNrZW5kVXJsKClcbiAgY29uc3QgdXJsID0gZW5kcG9pbnQuc3RhcnRzV2l0aCgnaHR0cCcpID8gZW5kcG9pbnQgOiBgJHtiYWNrZW5kVXJsfSR7ZW5kcG9pbnQuc3RhcnRzV2l0aCgnLycpID8gJycgOiAnLyd9JHtlbmRwb2ludH1gXG4gIFxuICBjb25zdCBkZWZhdWx0T3B0aW9uczogUmVxdWVzdEluaXQgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgIH0sXG4gICAgc2lnbmFsOiBBYm9ydFNpZ25hbC50aW1lb3V0KDEwMDAwKSwgLy8gMTAgc2Vjb25kIHRpbWVvdXRcbiAgICAuLi5vcHRpb25zLFxuICB9XG4gIFxuICBjb25zb2xlLmxvZyhg8J+MkCBBUEkgUmVxdWVzdDogJHtvcHRpb25zLm1ldGhvZCB8fCAnR0VUJ30gJHt1cmx9YClcbiAgXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIGRlZmF1bHRPcHRpb25zKVxuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBBUEkgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YClcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhg4pyFIEFQSSBTdWNjZXNzOiAke29wdGlvbnMubWV0aG9kIHx8ICdHRVQnfSAke3VybH1gKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBBUEkgUmVxdWVzdCBGYWlsZWQ6ICR7dXJsfWAsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLyoqXG4gKiBNYWtlIEFQSSByZXF1ZXN0IGFuZCByZXR1cm4gSlNPTiB3aXRoIGVycm9yIGhhbmRsaW5nXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcGlSZXF1ZXN0SnNvbjxUID0gYW55PihlbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdChlbmRwb2ludCwgb3B0aW9ucylcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxufSJdLCJuYW1lcyI6WyJnZXRCYWNrZW5kVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0JBQ0tFTkRfVVJMIiwidHJpbSIsImFwaVJlcXVlc3QiLCJlbmRwb2ludCIsIm9wdGlvbnMiLCJiYWNrZW5kVXJsIiwidXJsIiwic3RhcnRzV2l0aCIsImRlZmF1bHRPcHRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsInNpZ25hbCIsIkFib3J0U2lnbmFsIiwidGltZW91dCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJlcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJFcnJvciIsImFwaVJlcXVlc3RKc29uIiwianNvbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/api.ts\n"));

/***/ })

});