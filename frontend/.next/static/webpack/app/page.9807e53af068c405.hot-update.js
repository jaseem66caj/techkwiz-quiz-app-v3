"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/analyticsDataManager.ts":
/*!*******************************************!*\
  !*** ./src/utils/analyticsDataManager.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyticsDataManager: () => (/* binding */ analyticsDataManager)\n/* harmony export */ });\n/* harmony import */ var _types_admin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/admin */ \"(app-pages-browser)/./src/types/admin.ts\");\n/* harmony import */ var _quizDataManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quizDataManager */ \"(app-pages-browser)/./src/utils/quizDataManager.ts\");\n/* harmony import */ var _rewardDataManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rewardDataManager */ \"(app-pages-browser)/./src/utils/rewardDataManager.ts\");\n\n\n\n// Analytics data manager class\nclass AnalyticsDataManager {\n    static getInstance() {\n        if (!AnalyticsDataManager.instance) {\n            AnalyticsDataManager.instance = new AnalyticsDataManager();\n        }\n        return AnalyticsDataManager.instance;\n    }\n    // Safe localStorage operations\n    safeGetItem(key) {\n        try {\n            return localStorage.getItem(key);\n        } catch (error) {\n            console.error(\"Error reading from localStorage key \".concat(key, \":\"), error);\n            return null;\n        }\n    }\n    safeSetItem(key, value) {\n        try {\n            localStorage.setItem(key, value);\n            return true;\n        } catch (error) {\n            console.error(\"Error writing to localStorage key \".concat(key, \":\"), error);\n            return false;\n        }\n    }\n    // Get analytics data with mock generation\n    getAnalyticsData(timeRange) {\n        const data = this.safeGetItem(_types_admin__WEBPACK_IMPORTED_MODULE_0__.ANALYTICS_STORAGE_KEYS.DATA);\n        if (!data) {\n            return this.generateMockAnalyticsData(timeRange);\n        }\n        try {\n            const analyticsData = JSON.parse(data);\n            return this.validateAndMigrateData(analyticsData, timeRange);\n        } catch (error) {\n            console.error('Error parsing analytics data:', error);\n            return this.generateMockAnalyticsData(timeRange);\n        }\n    }\n    // Generate realistic mock data based on existing quiz and reward data\n    generateMockAnalyticsData(timeRange) {\n        const currentTimeRange = timeRange || _types_admin__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_RANGES[1] // Default to last 30 days\n        ;\n        const questions = _quizDataManager__WEBPACK_IMPORTED_MODULE_1__.quizDataManager.getQuestions();\n        const rewardConfig = _rewardDataManager__WEBPACK_IMPORTED_MODULE_2__.rewardDataManager.getRewardConfig();\n        // Generate quiz metrics based on actual questions\n        const quizMetrics = this.generateQuizMetrics(questions.length);\n        // Generate reward metrics based on actual achievements\n        const rewardMetrics = this.generateRewardMetrics(rewardConfig.achievements.length);\n        // Generate user activity data\n        const userActivity = this.generateUserActivity();\n        const analyticsData = {\n            id: \"analytics_\".concat(Date.now()),\n            quizMetrics,\n            rewardMetrics,\n            userActivity,\n            timeRange: currentTimeRange,\n            createdAt: Date.now(),\n            updatedAt: Date.now()\n        };\n        // Cache the generated data\n        this.safeSetItem(_types_admin__WEBPACK_IMPORTED_MODULE_0__.ANALYTICS_STORAGE_KEYS.DATA, JSON.stringify(analyticsData));\n        return analyticsData;\n    }\n    // Generate quiz metrics\n    generateQuizMetrics(totalQuestions) {\n        // Base calculations on actual question count\n        const questionsAnswered = Math.floor(totalQuestions * 45 + Math.random() * 100) // Simulate usage\n        ;\n        const correctAnswers = Math.floor(questionsAnswered * (0.65 + Math.random() * 0.2)) // 65-85% success rate\n        ;\n        const incorrectAnswers = questionsAnswered - correctAnswers;\n        const successRate = questionsAnswered > 0 ? correctAnswers / questionsAnswered * 100 : 0;\n        // Generate category performance based on DEFAULT_CATEGORIES\n        const categoryPerformance = _types_admin__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CATEGORIES.map((category)=>{\n            const answered = Math.floor(Math.random() * 20) + 5;\n            const correct = Math.floor(answered * (0.6 + Math.random() * 0.3));\n            return {\n                category: category.name,\n                questionsAnswered: answered,\n                correctAnswers: correct,\n                successRate: answered > 0 ? correct / answered * 100 : 0,\n                averageTime: 15 + Math.random() * 30 // 15-45 seconds\n            };\n        });\n        // Generate difficulty distribution\n        const difficultyDistribution = {\n            beginner: Math.floor(Math.random() * 40) + 30,\n            intermediate: Math.floor(Math.random() * 30) + 20,\n            advanced: Math.floor(Math.random() * 20) + 10 // 10-30%\n        };\n        // Generate time-based performance (last 30 days)\n        const timeBasedPerformance = [];\n        for(let i = 29; i >= 0; i--){\n            const date = new Date();\n            date.setDate(date.getDate() - i);\n            timeBasedPerformance.push({\n                date: date.toISOString().split('T')[0],\n                questionsAnswered: Math.floor(Math.random() * 50) + 10,\n                successRate: 60 + Math.random() * 30,\n                activeUsers: Math.floor(Math.random() * 20) + 5\n            });\n        }\n        return {\n            totalQuestions,\n            questionsAnswered,\n            correctAnswers,\n            incorrectAnswers,\n            successRate,\n            categoryPerformance,\n            averageSessionTime: 8.5 + Math.random() * 5,\n            popularCategories: categoryPerformance.sort((a, b)=>b.questionsAnswered - a.questionsAnswered).slice(0, 3).map((c)=>c.category),\n            difficultyDistribution,\n            timeBasedPerformance\n        };\n    }\n    // Generate reward metrics\n    generateRewardMetrics(totalAchievements) {\n        const activeUsers = Math.floor(Math.random() * 50) + 25;\n        const totalCoinsEarned = Math.floor(Math.random() * 10000) + 5000;\n        const achievementsUnlocked = Math.floor(totalAchievements * activeUsers * 0.3) // 30% unlock rate\n        ;\n        // Generate coin distribution\n        const coinDistribution = {\n            correct: Math.floor(totalCoinsEarned * 0.6),\n            incorrect: Math.floor(totalCoinsEarned * 0.2),\n            bonus: Math.floor(totalCoinsEarned * 0.15),\n            achievements: Math.floor(totalCoinsEarned * 0.05) // 5% from achievements\n        };\n        // Generate reward trends (last 30 days)\n        const rewardTrends = [];\n        for(let i = 29; i >= 0; i--){\n            const date = new Date();\n            date.setDate(date.getDate() - i);\n            rewardTrends.push({\n                date: date.toISOString().split('T')[0],\n                coinsEarned: Math.floor(Math.random() * 500) + 100,\n                achievementsUnlocked: Math.floor(Math.random() * 5),\n                activeUsers: Math.floor(Math.random() * 15) + 5\n            });\n        }\n        return {\n            totalCoinsEarned,\n            achievementsUnlocked,\n            activeUsers,\n            engagementRate: 75 + Math.random() * 20,\n            averageCoinsPerSession: totalCoinsEarned / (activeUsers * 10),\n            topAchievements: [],\n            coinDistribution,\n            rewardTrends\n        };\n    }\n    // Generate user activity data\n    generateUserActivity() {\n        const totalSessions = Math.floor(Math.random() * 500) + 200;\n        // Generate device breakdown\n        const deviceTypes = {\n            desktop: Math.floor(Math.random() * 40) + 30,\n            mobile: Math.floor(Math.random() * 50) + 25,\n            tablet: Math.floor(Math.random() * 20) + 5 // 5-25%\n        };\n        // Generate session distribution\n        const sessionDistribution = [\n            {\n                duration: '0-2 min',\n                count: Math.floor(totalSessions * 0.15)\n            },\n            {\n                duration: '2-5 min',\n                count: Math.floor(totalSessions * 0.25)\n            },\n            {\n                duration: '5-10 min',\n                count: Math.floor(totalSessions * 0.35)\n            },\n            {\n                duration: '10-20 min',\n                count: Math.floor(totalSessions * 0.20)\n            },\n            {\n                duration: '20+ min',\n                count: Math.floor(totalSessions * 0.05)\n            }\n        ];\n        // Generate user journey\n        const userJourney = [\n            {\n                step: 'Landing',\n                users: 100,\n                dropoffRate: 0\n            },\n            {\n                step: 'Quiz Start',\n                users: 85,\n                dropoffRate: 15\n            },\n            {\n                step: 'First Question',\n                users: 80,\n                dropoffRate: 6\n            },\n            {\n                step: 'Mid Quiz',\n                users: 70,\n                dropoffRate: 12.5\n            },\n            {\n                step: 'Quiz Complete',\n                users: 65,\n                dropoffRate: 7\n            },\n            {\n                step: 'Reward Claim',\n                users: 60,\n                dropoffRate: 8\n            }\n        ];\n        return {\n            totalSessions,\n            averageSessionDuration: 7.5 + Math.random() * 5,\n            returnRate: 45 + Math.random() * 30,\n            peakUsageHours: [\n                14,\n                15,\n                16,\n                19,\n                20,\n                21\n            ],\n            deviceTypes,\n            geographicData: {\n                'United States': 35,\n                'United Kingdom': 20,\n                'Canada': 15,\n                'Australia': 12,\n                'Germany': 8,\n                'France': 6,\n                'Other': 4\n            },\n            sessionDistribution,\n            userJourney\n        };\n    }\n    // Validate and migrate data\n    validateAndMigrateData(data, timeRange) {\n        // Ensure all required properties exist\n        const migratedData = {\n            id: data.id || \"analytics_\".concat(Date.now()),\n            quizMetrics: data.quizMetrics || this.generateQuizMetrics(2),\n            rewardMetrics: data.rewardMetrics || this.generateRewardMetrics(1),\n            userActivity: data.userActivity || this.generateUserActivity(),\n            timeRange: timeRange || data.timeRange || _types_admin__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_RANGES[1],\n            createdAt: data.createdAt || Date.now(),\n            updatedAt: Date.now()\n        };\n        return migratedData;\n    }\n    // Refresh analytics data\n    refreshData(timeRange) {\n        const newData = this.generateMockAnalyticsData(timeRange);\n        this.safeSetItem(_types_admin__WEBPACK_IMPORTED_MODULE_0__.ANALYTICS_STORAGE_KEYS.DATA, JSON.stringify(newData));\n        return newData;\n    }\n    // Export analytics data\n    exportData(options) {\n        const data = this.getAnalyticsData(options.dateRange);\n        if (options.format === 'json') {\n            return JSON.stringify(data, null, 2);\n        } else if (options.format === 'csv') {\n            return this.convertToCSV(data, options.sections);\n        }\n        return JSON.stringify(data, null, 2) // Fallback to JSON\n        ;\n    }\n    // Convert data to CSV format\n    convertToCSV(data, sections) {\n        let csv = '';\n        if (sections.includes('quiz')) {\n            csv += 'Quiz Analytics\\n';\n            csv += 'Metric,Value\\n';\n            csv += \"Total Questions,\".concat(data.quizMetrics.totalQuestions, \"\\n\");\n            csv += \"Questions Answered,\".concat(data.quizMetrics.questionsAnswered, \"\\n\");\n            csv += \"Success Rate,\".concat(data.quizMetrics.successRate.toFixed(2), \"%\\n\");\n            csv += \"Average Session Time,\".concat(data.quizMetrics.averageSessionTime.toFixed(1), \" minutes\\n\\n\");\n        }\n        if (sections.includes('rewards')) {\n            csv += 'Reward Analytics\\n';\n            csv += 'Metric,Value\\n';\n            csv += \"Total Coins Earned,\".concat(data.rewardMetrics.totalCoinsEarned, \"\\n\");\n            csv += \"Achievements Unlocked,\".concat(data.rewardMetrics.achievementsUnlocked, \"\\n\");\n            csv += \"Active Users,\".concat(data.rewardMetrics.activeUsers, \"\\n\");\n            csv += \"Engagement Rate,\".concat(data.rewardMetrics.engagementRate.toFixed(2), \"%\\n\\n\");\n        }\n        return csv;\n    }\n    // Get analytics settings\n    getSettings() {\n        const settings = this.safeGetItem(_types_admin__WEBPACK_IMPORTED_MODULE_0__.ANALYTICS_STORAGE_KEYS.SETTINGS);\n        if (!settings) {\n            return {\n                defaultTimeRange: _types_admin__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_RANGES[1],\n                autoRefresh: true,\n                refreshInterval: 30000,\n                chartType: 'line'\n            };\n        }\n        try {\n            return JSON.parse(settings);\n        } catch (error) {\n            console.error('Error parsing analytics settings:', error);\n            return {\n                defaultTimeRange: _types_admin__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIME_RANGES[1],\n                autoRefresh: true,\n                refreshInterval: 30000,\n                chartType: 'line'\n            };\n        }\n    }\n    // Save analytics settings\n    saveSettings(settings) {\n        return this.safeSetItem(_types_admin__WEBPACK_IMPORTED_MODULE_0__.ANALYTICS_STORAGE_KEYS.SETTINGS, JSON.stringify(settings));\n    }\n    // Get quiz metrics for dashboard\n    getQuizMetrics() {\n        try {\n            var _analyticsData_rewardMetrics, _analyticsData_quizMetrics, _analyticsData_quizMetrics1;\n            const analyticsData = this.getAnalyticsData();\n            return {\n                totalCoinsEarned: ((_analyticsData_rewardMetrics = analyticsData.rewardMetrics) === null || _analyticsData_rewardMetrics === void 0 ? void 0 : _analyticsData_rewardMetrics.totalCoinsEarned) || 0,\n                questionsAnswered: ((_analyticsData_quizMetrics = analyticsData.quizMetrics) === null || _analyticsData_quizMetrics === void 0 ? void 0 : _analyticsData_quizMetrics.questionsAnswered) || 0,\n                successRate: ((_analyticsData_quizMetrics1 = analyticsData.quizMetrics) === null || _analyticsData_quizMetrics1 === void 0 ? void 0 : _analyticsData_quizMetrics1.successRate) || 0\n            };\n        } catch (error) {\n            console.error('Error getting quiz metrics:', error);\n            return {\n                totalCoinsEarned: 0,\n                questionsAnswered: 0,\n                successRate: 0\n            };\n        }\n    }\n    // Get activity data for dashboard\n    getActivityData() {\n        try {\n            var _analyticsData_userActivity;\n            const analyticsData = this.getAnalyticsData();\n            return {\n                averageSessionTime: ((_analyticsData_userActivity = analyticsData.userActivity) === null || _analyticsData_userActivity === void 0 ? void 0 : _analyticsData_userActivity.averageSessionDuration) || 0\n            };\n        } catch (error) {\n            console.error('Error getting activity data:', error);\n            return {\n                averageSessionTime: 0\n            };\n        }\n    }\n    // Get recent activity for dashboard\n    getRecentActivity() {\n        try {\n            var _analyticsData_quizMetrics, _analyticsData_rewardMetrics, _analyticsData_rewardMetrics1;\n            const analyticsData = this.getAnalyticsData();\n            // Generate mock recent activity based on analytics data\n            const activities = [];\n            const now = Date.now();\n            // Add some sample activities based on the analytics data\n            if (((_analyticsData_quizMetrics = analyticsData.quizMetrics) === null || _analyticsData_quizMetrics === void 0 ? void 0 : _analyticsData_quizMetrics.questionsAnswered) > 0) {\n                activities.push({\n                    id: 'activity-1',\n                    type: 'quiz',\n                    description: \"\".concat(analyticsData.quizMetrics.questionsAnswered, \" questions answered today\"),\n                    timestamp: now - 1000 * 60 * 30 // 30 minutes ago\n                });\n            }\n            if (((_analyticsData_rewardMetrics = analyticsData.rewardMetrics) === null || _analyticsData_rewardMetrics === void 0 ? void 0 : _analyticsData_rewardMetrics.totalCoinsEarned) > 0) {\n                activities.push({\n                    id: 'activity-2',\n                    type: 'reward',\n                    description: \"\".concat(analyticsData.rewardMetrics.totalCoinsEarned, \" coins earned\"),\n                    timestamp: now - 1000 * 60 * 60 // 1 hour ago\n                });\n            }\n            if (((_analyticsData_rewardMetrics1 = analyticsData.rewardMetrics) === null || _analyticsData_rewardMetrics1 === void 0 ? void 0 : _analyticsData_rewardMetrics1.achievementsUnlocked) > 0) {\n                activities.push({\n                    id: 'activity-3',\n                    type: 'achievement',\n                    description: \"\".concat(analyticsData.rewardMetrics.achievementsUnlocked, \" achievements unlocked\"),\n                    timestamp: now - 1000 * 60 * 90 // 1.5 hours ago\n                });\n            }\n            // Add some default activities if no data\n            if (activities.length === 0) {\n                activities.push({\n                    id: 'activity-default-1',\n                    type: 'system',\n                    description: 'Dashboard initialized',\n                    timestamp: now - 1000 * 60 * 10 // 10 minutes ago\n                }, {\n                    id: 'activity-default-2',\n                    type: 'system',\n                    description: 'Analytics data refreshed',\n                    timestamp: now - 1000 * 60 * 20 // 20 minutes ago\n                });\n            }\n            return activities.sort((a, b)=>b.timestamp - a.timestamp) // Sort by newest first\n            ;\n        } catch (error) {\n            console.error('Error getting recent activity:', error);\n            return [];\n        }\n    }\n}\n// Export singleton instance\nconst analyticsDataManager = AnalyticsDataManager.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/analyticsDataManager.ts\n"));

/***/ })

});