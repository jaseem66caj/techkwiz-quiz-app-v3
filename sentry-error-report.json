{
  "timestamp": "2025-09-09T11:22:21.924Z",
  "summary": {
    "totalIssues": 54,
    "highSeverity": 31,
    "mediumSeverity": 23,
    "lowSeverity": 0
  },
  "errorsByType": {
    "UNHANDLED_PROMISE": [
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/__tests__/visual/generate-baselines.js",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async function generateBaselines() {\n  console.log('üîç Generating baseline images for TechKwiz...');..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/comprehensiveDataSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async syncFromFrontend(): Promise<SyncedDashboardData> {\n    // Prevent concurrent synchronization o..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/comprehensiveDataSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async pullUserActivityData(): Promise<{\n    activeSessions: number\n    totalUsers: number\n    recent..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/comprehensiveDataSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async pullAnalyticsData(): Promise<{\n    totalPageViews: number\n    engagementScore: number\n    conv..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/comprehensiveDataSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async triggerManualSync(): Promise<{ success: boolean; message: string; data?: SyncedDashboardData }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/comprehensiveDataSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async forceSyncAll(): Promise<{ success: boolean; message: string; data?: SyncedDashboardData }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/fileDataManager.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async optimizeImage(imageContent: string, mimeType: string, quality: number = 0.8): Promise<{ conten..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/fileDataManager.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async generateImageThumbnail(imageContent: string, size: number = 200): Promise<string> {\n    return..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async testApiConnection(): Promise<{ success: boolean; message: string; responseTime?: number }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async makeApiRequest(endpoint: string, options: RequestInit = {}..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async registerWebhook(url: string, events: string[]): Promise<{ success: boolean; webhookId?: string..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async testWebhook(url: string): Promise<{ success: boolean; message: string }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async connectSocialMedia(platform: 'facebook' | 'twitter' | 'instagram', credentials: any): Promise<..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async postToSocialMedia(platform: string, content: string, media?: string[]): Promise<{ success: boo..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async sendAnalyticsEvent(event: string, properties: Record<string, any>): Promise<void> {\n    if (!(..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async sendNotification(type: 'email' | 'sms' | 'push', recipient: string, message: string, subject?:..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async initializeAdSense(): Promise<{ success: boolean; message: string }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async displayAd(adSlotId: string, containerId: string): Promise<{ success: boolean; message: string ..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async processSyncQueue(): Promise<void> {\n    if (this.isProcessing || this.syncQueue.length === 0) ..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async syncQuizData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      // A..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async syncRewardData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      //..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async syncAnalyticsData(event: SyncEvent): Promise<void> {\n    // Analytics data flows from game to ..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async syncSettingsData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      ..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async triggerSync(): Promise<{ success: boolean; message: string }..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/realTimeSync.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async forceSyncAll(): Promise<void> {\n    const quizData = quizDataManager.getQuestions()\n    const ..."
      },
      {
        "type": "UNHANDLED_PROMISE",
        "file": "/utils/wordpress.ts",
        "severity": "HIGH",
        "description": "Async function without error handling",
        "code": "async function fetchWordPressPosts(\n  siteUrl: string = 'https://techkwiz.com',\n  perPage: number = ..."
      }
    ],
    "LOCALSTORAGE_ERROR": [
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/hooks/useRevenueOptimization.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('techkwiz_last_login')\n    \n    if (lastLogin !== today) {\n      // Calculate streak\n      const yesterday = new Date()\n      yesterday.setDate(yesterday.getDate() - 1)\n      const isConsecutive = lastLogin === yesterday.toDateString()\n      \n      const currentStreak = isConsecutive ? revenueMetrics.dailyStreak + 1 : 1\n      \n      setRevenueMetrics(prev => ({\n        ...prev,\n        dailyStreak: currentStreak,\n        lastLoginDate: today\n      "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/hooks/useRevenueOptimization.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.setItem('techkwiz_last_login', today)\n      // Daily bonus modal removed - bonus automatically applied\n      \n      return currentStreak\n    "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/hooks/useStreakTracking.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('techkwiz_streak_data')\n    if (savedStreak) {\n      try {\n        setStreakData(JSON.parse(savedStreak))\n      "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/hooks/useStreakTracking.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.setItem('techkwiz_streak_data', JSON.stringify(streakData))\n  "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/realTimeSync.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('game_last_sync') || '0')\n    \n    return {\n      lastSyncTime: this.lastSyncTime,\n      queueLength: this.syncQueue.length,\n      isProcessing: this.isProcessing,\n      gameLastSync\n    "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/realTimeSync.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('game_last_sync') || '0')\n    const adminLastUpdate = Math.max(\n      parseInt(localStorage.getItem('admin_quiz_questions_updated') || '0'),\n      parseInt(localStorage.getItem('admin_reward_config_updated') || '0')\n    )\n    \n    return gameLastSync >= adminLastUpdate\n  "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/realTimeSync.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.setItem('game_quiz_data', JSON.stringify(quizData))\n    localStorage.setItem('game_reward_data', JSON.stringify(rewardData))\n    localStorage.setItem('game_last_sync', Date.now().toString())\n    \n    // Notify listeners\n    this.notifyListeners('quiz_updated', {\n      type: 'quiz_updated',\n      data: quizData,\n      timestamp: Date.now(),\n      source: 'admin'\n    "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/twoFactorAuth.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('admin_2fa_failed_attempts')\n    return attempts ? parseInt(attempts) : 0\n  "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/twoFactorAuth.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.setItem('admin_2fa_failed_attempts', attempts.toString())\n  "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/twoFactorAuth.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.setItem('admin_2fa_locked_until', lockTime.toString())\n  "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/twoFactorAuth.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('admin_2fa_locked_until')\n    if (!lockTime) return false\n\n    const unlockTime = parseInt(lockTime)\n    if (Date.now() >= unlockTime) {\n      localStorage.removeItem('admin_2fa_locked_until')\n      this.clearFailedAttempts()\n      return false\n    "
      },
      {
        "type": "LOCALSTORAGE_ERROR",
        "file": "/utils/twoFactorAuth.ts",
        "severity": "MEDIUM",
        "description": "localStorage access without error handling",
        "code": "localStorage.getItem('admin_2fa_locked_until')\n    return lockTime ? parseInt(lockTime) : null\n  "
      }
    ],
    "API_ERROR": [
      {
        "type": "API_ERROR",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Fetch call without error handling",
        "code": "fetch(`${this.settings.apiConfiguration.baseUrl}/health`, {\n        method: 'GET',\n        headers: ..."
      },
      {
        "type": "API_ERROR",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Fetch call without error handling",
        "code": "fetch(url, {\n      ...options,\n      headers,\n      signal: AbortSignal.timeout(this.settings.apiCon..."
      },
      {
        "type": "API_ERROR",
        "file": "/utils/integrationService.ts",
        "severity": "HIGH",
        "description": "Fetch call without error handling",
        "code": "fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      ..."
      },
      {
        "type": "API_ERROR",
        "file": "/utils/wordpress.ts",
        "severity": "HIGH",
        "description": "Fetch call without error handling",
        "code": "fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        ..."
      },
      {
        "type": "API_ERROR",
        "file": "/utils/wordpress.ts",
        "severity": "HIGH",
        "description": "Fetch call without error handling",
        "code": "fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(feedUrl)..."
      }
    ],
    "NAVIGATION_ERROR": [
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/profile/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/quiz/[category]/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/quiz/[category]/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/quiz/[category]/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/quiz/[category]/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/start/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/start/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push(`/quiz/${categoryId}`)"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/app/test-exit-prevention/page.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/start')"
      },
      {
        "type": "NAVIGATION_ERROR",
        "file": "/components/Navigation.tsx",
        "severity": "MEDIUM",
        "description": "Router navigation without error handling",
        "code": "router.push('/')"
      }
    ]
  },
  "allErrors": [
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/__tests__/visual/generate-baselines.js",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async function generateBaselines() {\n  console.log('üîç Generating baseline images for TechKwiz...');..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/comprehensiveDataSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async syncFromFrontend(): Promise<SyncedDashboardData> {\n    // Prevent concurrent synchronization o..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/comprehensiveDataSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async pullUserActivityData(): Promise<{\n    activeSessions: number\n    totalUsers: number\n    recent..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/comprehensiveDataSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async pullAnalyticsData(): Promise<{\n    totalPageViews: number\n    engagementScore: number\n    conv..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/comprehensiveDataSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async triggerManualSync(): Promise<{ success: boolean; message: string; data?: SyncedDashboardData }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/comprehensiveDataSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async forceSyncAll(): Promise<{ success: boolean; message: string; data?: SyncedDashboardData }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/fileDataManager.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async optimizeImage(imageContent: string, mimeType: string, quality: number = 0.8): Promise<{ conten..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/fileDataManager.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async generateImageThumbnail(imageContent: string, size: number = 200): Promise<string> {\n    return..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async testApiConnection(): Promise<{ success: boolean; message: string; responseTime?: number }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async makeApiRequest(endpoint: string, options: RequestInit = {}..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async registerWebhook(url: string, events: string[]): Promise<{ success: boolean; webhookId?: string..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async testWebhook(url: string): Promise<{ success: boolean; message: string }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async connectSocialMedia(platform: 'facebook' | 'twitter' | 'instagram', credentials: any): Promise<..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async postToSocialMedia(platform: string, content: string, media?: string[]): Promise<{ success: boo..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async sendAnalyticsEvent(event: string, properties: Record<string, any>): Promise<void> {\n    if (!(..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async sendNotification(type: 'email' | 'sms' | 'push', recipient: string, message: string, subject?:..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async initializeAdSense(): Promise<{ success: boolean; message: string }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async displayAd(adSlotId: string, containerId: string): Promise<{ success: boolean; message: string ..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async processSyncQueue(): Promise<void> {\n    if (this.isProcessing || this.syncQueue.length === 0) ..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async syncQuizData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      // A..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async syncRewardData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      //..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async syncAnalyticsData(event: SyncEvent): Promise<void> {\n    // Analytics data flows from game to ..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async syncSettingsData(event: SyncEvent): Promise<void> {\n    if (event.source === 'admin') {\n      ..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async triggerSync(): Promise<{ success: boolean; message: string }..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/realTimeSync.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async forceSyncAll(): Promise<void> {\n    const quizData = quizDataManager.getQuestions()\n    const ..."
    },
    {
      "type": "UNHANDLED_PROMISE",
      "file": "/utils/wordpress.ts",
      "severity": "HIGH",
      "description": "Async function without error handling",
      "code": "async function fetchWordPressPosts(\n  siteUrl: string = 'https://techkwiz.com',\n  perPage: number = ..."
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/hooks/useRevenueOptimization.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('techkwiz_last_login')\n    \n    if (lastLogin !== today) {\n      // Calculate streak\n      const yesterday = new Date()\n      yesterday.setDate(yesterday.getDate() - 1)\n      const isConsecutive = lastLogin === yesterday.toDateString()\n      \n      const currentStreak = isConsecutive ? revenueMetrics.dailyStreak + 1 : 1\n      \n      setRevenueMetrics(prev => ({\n        ...prev,\n        dailyStreak: currentStreak,\n        lastLoginDate: today\n      "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/hooks/useRevenueOptimization.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.setItem('techkwiz_last_login', today)\n      // Daily bonus modal removed - bonus automatically applied\n      \n      return currentStreak\n    "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/hooks/useStreakTracking.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('techkwiz_streak_data')\n    if (savedStreak) {\n      try {\n        setStreakData(JSON.parse(savedStreak))\n      "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/hooks/useStreakTracking.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.setItem('techkwiz_streak_data', JSON.stringify(streakData))\n  "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/realTimeSync.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('game_last_sync') || '0')\n    \n    return {\n      lastSyncTime: this.lastSyncTime,\n      queueLength: this.syncQueue.length,\n      isProcessing: this.isProcessing,\n      gameLastSync\n    "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/realTimeSync.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('game_last_sync') || '0')\n    const adminLastUpdate = Math.max(\n      parseInt(localStorage.getItem('admin_quiz_questions_updated') || '0'),\n      parseInt(localStorage.getItem('admin_reward_config_updated') || '0')\n    )\n    \n    return gameLastSync >= adminLastUpdate\n  "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/realTimeSync.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.setItem('game_quiz_data', JSON.stringify(quizData))\n    localStorage.setItem('game_reward_data', JSON.stringify(rewardData))\n    localStorage.setItem('game_last_sync', Date.now().toString())\n    \n    // Notify listeners\n    this.notifyListeners('quiz_updated', {\n      type: 'quiz_updated',\n      data: quizData,\n      timestamp: Date.now(),\n      source: 'admin'\n    "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/twoFactorAuth.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('admin_2fa_failed_attempts')\n    return attempts ? parseInt(attempts) : 0\n  "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/twoFactorAuth.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.setItem('admin_2fa_failed_attempts', attempts.toString())\n  "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/twoFactorAuth.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.setItem('admin_2fa_locked_until', lockTime.toString())\n  "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/twoFactorAuth.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('admin_2fa_locked_until')\n    if (!lockTime) return false\n\n    const unlockTime = parseInt(lockTime)\n    if (Date.now() >= unlockTime) {\n      localStorage.removeItem('admin_2fa_locked_until')\n      this.clearFailedAttempts()\n      return false\n    "
    },
    {
      "type": "LOCALSTORAGE_ERROR",
      "file": "/utils/twoFactorAuth.ts",
      "severity": "MEDIUM",
      "description": "localStorage access without error handling",
      "code": "localStorage.getItem('admin_2fa_locked_until')\n    return lockTime ? parseInt(lockTime) : null\n  "
    },
    {
      "type": "API_ERROR",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Fetch call without error handling",
      "code": "fetch(`${this.settings.apiConfiguration.baseUrl}/health`, {\n        method: 'GET',\n        headers: ..."
    },
    {
      "type": "API_ERROR",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Fetch call without error handling",
      "code": "fetch(url, {\n      ...options,\n      headers,\n      signal: AbortSignal.timeout(this.settings.apiCon..."
    },
    {
      "type": "API_ERROR",
      "file": "/utils/integrationService.ts",
      "severity": "HIGH",
      "description": "Fetch call without error handling",
      "code": "fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      ..."
    },
    {
      "type": "API_ERROR",
      "file": "/utils/wordpress.ts",
      "severity": "HIGH",
      "description": "Fetch call without error handling",
      "code": "fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        ..."
    },
    {
      "type": "API_ERROR",
      "file": "/utils/wordpress.ts",
      "severity": "HIGH",
      "description": "Fetch call without error handling",
      "code": "fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(feedUrl)..."
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/profile/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/quiz/[category]/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/quiz/[category]/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/quiz/[category]/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/quiz/[category]/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/start/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/start/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push(`/quiz/${categoryId}`)"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/app/test-exit-prevention/page.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/start')"
    },
    {
      "type": "NAVIGATION_ERROR",
      "file": "/components/Navigation.tsx",
      "severity": "MEDIUM",
      "description": "Router navigation without error handling",
      "code": "router.push('/')"
    }
  ]
}